/*
 * Copyright (c) 2015 - 2016, Freescale Semiconductor, Inc.
 * Copyright 2016 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */
#include "usb_device_config.h"
#include "usb.h"
#include "usb_device.h"

#include "usb_device_audio.h"
#include "usb_audio_config.h"
#include "usb_device_descriptor.h"
#include "audio_generator.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/

/*******************************************************************************
 * Prototypes
 ******************************************************************************/

/*******************************************************************************
 * Variables
 ******************************************************************************/
uint8_t g_UsbDeviceCurrentConfigure = 0U;
uint8_t g_UsbDeviceInterface[USB_AUDIO_GENERATOR_INTERFACE_COUNT];

/* Define device descriptor */
USB_DMA_INIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE)
uint8_t g_UsbDeviceDescriptor[] = {
    USB_DESCRIPTOR_LENGTH_DEVICE, /* Size of this descriptor in bytes */
    USB_DESCRIPTOR_TYPE_DEVICE,   /* DEVICE Descriptor Type */
    USB_SHORT_GET_LOW(USB_DEVICE_SPECIFIC_BCD_VERSION),
    USB_SHORT_GET_HIGH(USB_DEVICE_SPECIFIC_BCD_VERSION),
    USB_DEVICE_CLASS,
    USB_DEVICE_SUBCLASS,
    USB_DEVICE_PROTOCOL,
    USB_CONTROL_MAX_PACKET_SIZE,
    USB_SHORT_GET_LOW(USB_DEVICE_VID),
    USB_SHORT_GET_HIGH(USB_DEVICE_VID),
    USB_SHORT_GET_LOW(USB_DEVICE_PID),
    USB_SHORT_GET_HIGH(USB_DEVICE_PID),
    USB_SHORT_GET_LOW(USB_DEVICE_DEMO_BCD_VERSION),
    USB_SHORT_GET_HIGH(USB_DEVICE_DEMO_BCD_VERSION),
    0x01U, /* Index of string descriptor describing manufacturer */
    0x02U, /* Index of string descriptor describing product */
    0x00U, /* Index of string descriptor describing serial number */
    USB_DEVICE_CONFIGURATION_COUNT,
};

/* Define configuration descriptor */
USB_DMA_INIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE)
uint8_t g_UsbDeviceConfigurationDescriptor[] = {
#if (USB_DEVICE_CONFIG_AUDIO_CLASS_2_0)

    /* -------- UAC 2.0 BRANCH (unchanged) -------- */
    USB_DESCRIPTOR_LENGTH_CONFIGURE,
    USB_DESCRIPTOR_TYPE_CONFIGURE,
    USB_SHORT_GET_LOW(
        USB_DESCRIPTOR_LENGTH_CONFIGURE + 0x08U + USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_AUDIO_CONTROL_INTERFACE_HEADER_LENGTH + 0x08U + 0x11U + 0x0EU + 0x0CU +
        USB_DESCRIPTOR_LENGTH_INTERFACE + USB_DESCRIPTOR_LENGTH_INTERFACE + 0x10U + 0x06U +
        USB_AUDIO_STANDARD_AS_ISO_DATA_ENDPOINT_LENGTH + USB_AUDIO_CLASS_SPECIFIC_ENDPOINT_LENGTH),
    USB_SHORT_GET_HIGH(
        USB_DESCRIPTOR_LENGTH_CONFIGURE + 0x08U + USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_AUDIO_CONTROL_INTERFACE_HEADER_LENGTH + 0x08U + 0x11U + 0x0EU + 0x0CU +
        USB_DESCRIPTOR_LENGTH_INTERFACE + USB_DESCRIPTOR_LENGTH_INTERFACE + 0x10U + 0x06U +
        USB_AUDIO_STANDARD_AS_ISO_DATA_ENDPOINT_LENGTH + USB_AUDIO_CLASS_SPECIFIC_ENDPOINT_LENGTH),
    USB_AUDIO_GENERATOR_INTERFACE_COUNT,
    USB_AUDIO_GENERATOR_CONFIGURE_INDEX,
    0x00U,
    (USB_DESCRIPTOR_CONFIGURE_ATTRIBUTE_D7_MASK)
#if defined(USB_DEVICE_CONFIG_SELF_POWER) && (USB_DEVICE_CONFIG_SELF_POWER > 0U)
        | (1U << USB_DESCRIPTOR_CONFIGURE_ATTRIBUTE_SELF_POWERED_SHIFT)
#endif
#if defined(USB_DEVICE_CONFIG_REMOTE_WAKEUP) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U)
        | (1U << USB_DESCRIPTOR_CONFIGURE_ATTRIBUTE_REMOTE_WAKEUP_SHIFT)
#endif
        ,
    0xFAU,
    /* Interface Association: AC + 2 Streaming */
    0x08U,
    USB_DESCRIPTOR_TYPE_INTERFACE_ASSOCIATION,
    0x00U,
    0x02U,
    USB_AUDIO_CLASS,
    0x00U,
    USB_AUDIO_PROTOCOL,
    0x00U,
    /* AC Interface, alt 0 */
    USB_DESCRIPTOR_LENGTH_INTERFACE,
    USB_DESCRIPTOR_TYPE_INTERFACE,
    USB_AUDIO_CONTROL_INTERFACE_INDEX,
    USB_AUDIO_GENERATOR_CONTROL_INTERFACE_ALTERNATE_0,
    0x00U,
    USB_AUDIO_CLASS,
    USB_SUBCLASS_AUDIOCONTROL,
    USB_AUDIO_PROTOCOL,
    0x02U,
    /* AC Header */
    USB_AUDIO_CONTROL_INTERFACE_HEADER_LENGTH,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_HEADER,
    0x00U, 0x02U,
    0x03U,
    0x3CU, 0x00U,
    0x00U,
    /* CLOCK SOURCE */
    0x08U,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_CLOCK_SOURCE_UNIT,
    USB_AUDIO_RECORDER_CONTROL_CLOCK_SOURCE_ENTITY_ID,
    0x01U,
    0x07U,
    0x00U,
    0x02U,
    /* INPUT TERMINAL (Mic) */
    0x11U,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_INPUT_TERMINAL,
    USB_AUDIO_RECORDER_CONTROL_INPUT_TERMINAL_ID,
    0x01U, 0x02U,
    0x00U,
    USB_AUDIO_RECORDER_CONTROL_CLOCK_SOURCE_ENTITY_ID,
    0x01U,
    0x01U,
    0x00U, 0x00U, 0x00U,
    0x00U,
    0x00U,
    0x00U,
    0x02U,
    /* FEATURE UNIT (Mic) */
    0x0EU,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_FEATURE_UNIT,
    USB_AUDIO_RECORDER_CONTROL_FEATURE_UNIT_ID,
    USB_AUDIO_RECORDER_CONTROL_INPUT_TERMINAL_ID,
    0x0FU,
    0x00U,
    0x00U,
    0x00U,
    0x00U,
    /* OUTPUT TERMINAL (Mic) */
    0x0CU,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_OUTPUT_TERMINAL,
    USB_AUDIO_RECORDER_CONTROL_OUTPUT_TERMINAL_ID,
    0x01U, 0x01U,
    0x00U,
    USB_AUDIO_RECORDER_CONTROL_FEATURE_UNIT_ID,
    USB_AUDIO_RECORDER_CONTROL_CLOCK_SOURCE_ENTITY_ID,
    0x00U,
    0x00U,
    /* AC Interrupt Endpoint */
    USB_DESCRIPTOR_LENGTH_AC_INTERRUPT_ENDPOINT,
    USB_DESCRIPTOR_TYPE_ENDPOINT,
    USB_AUDIO_CONTROL_ENDPOINT | (USB_IN << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT),
    USB_ENDPOINT_INTERRUPT,
    USB_SHORT_GET_LOW(FS_INTERRUPT_IN_PACKET_SIZE),
    USB_SHORT_GET_HIGH(FS_INTERRUPT_IN_PACKET_SIZE),
    FS_INTERRUPT_IN_INTERVAL,
    0x00U,
    0x00U,
    /* AS Interface (Mic) alt 0 */
    USB_DESCRIPTOR_LENGTH_INTERFACE,
    USB_DESCRIPTOR_TYPE_INTERFACE,
    USB_AUDIO_STREAM_INTERFACE_INDEX,
    USB_AUDIO_GENERATOR_STREAM_INTERFACE_ALTERNATE_0,
    0x00U,
    USB_AUDIO_CLASS,
    USB_SUBCLASS_AUDIOSTREAM,
    USB_AUDIO_PROTOCOL,
    0x00U,
    /* AS Interface (Mic) alt 1 */
    USB_DESCRIPTOR_LENGTH_INTERFACE,
    USB_DESCRIPTOR_TYPE_INTERFACE,
    USB_AUDIO_STREAM_INTERFACE_INDEX,
    USB_AUDIO_GENERATOR_STREAM_INTERFACE_ALTERNATE_1,
    0x01U,
    USB_AUDIO_CLASS,
    USB_SUBCLASS_AUDIOSTREAM,
    USB_AUDIO_PROTOCOL,
    0x00U,
    /* CS AS General (Mic) */
    USB_AUDIO_STREAMING_IFACE_DESC_SIZE,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_STREAMING_AS_GENERAL,
    USB_AUDIO_RECORDER_CONTROL_OUTPUT_TERMINAL_ID,
    0x00U,
    /* Type I Format (Mic) */
    USB_AUDIO_STREAMING_TYPE_I_DESC_SIZE,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_STREAMING_FORMAT_TYPE,
    USB_AUDIO_FORMAT_TYPE_I,
    AUDIO_FORMAT_CHANNELS,
    0x01U,
    0x08U,
    0x01U,
    0x40, 0x1F, 0x00U,
    /* Standard ISO IN Endpoint */
    USB_ENDPOINT_AUDIO_DESCRIPTOR_LENGTH,
    USB_DESCRIPTOR_TYPE_ENDPOINT,
    USB_AUDIO_STREAM_ENDPOINT | (USB_IN << 7),
    USB_ENDPOINT_ISOCHRONOUS,
    USB_SHORT_GET_LOW(FS_ISO_IN_ENDP_PACKET_SIZE),
    USB_SHORT_GET_HIGH(FS_ISO_IN_ENDP_PACKET_SIZE),
    ISO_IN_ENDP_INTERVAL,
    0x00U,
    0x00U,
    /* CS ISO IN Endpoint */
    USB_AUDIO_CLASS_SPECIFIC_ENDPOINT_LENGTH,
    USB_AUDIO_STREAM_ENDPOINT_DESCRIPTOR,
    USB_AUDIO_EP_GENERAL_DESCRIPTOR_SUBTYPE,
    0x00U,
    0x00U,
    0x00U,
    0x00U,
    0x00U,

#else  /* ========== UAC 1.0 BRANCH (Mic + Speaker) ========== */

    /* -------- CONFIGURATION Descriptor -------- */
    USB_DESCRIPTOR_LENGTH_CONFIGURE,
    USB_DESCRIPTOR_TYPE_CONFIGURE,
    USB_SHORT_GET_LOW(
        USB_DESCRIPTOR_LENGTH_CONFIGURE +
        /* AC block */
        USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_AUDIO_CONTROL_INTERFACE_HEADER_LENGTH +
        USB_AUDIO_INPUT_TERMINAL_ONLY_DESC_SIZE +
        USB_AUDIO_FEATURE_UNIT_ONLY_DESC_SIZE +
        USB_AUDIO_OUTPUT_TERMINAL_ONLY_DESC_SIZE +
        USB_DESCRIPTOR_LENGTH_AC_INTERRUPT_ENDPOINT +
        /* Mic streaming */
        USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_AUDIO_STREAMING_IFACE_DESC_SIZE +
        USB_AUDIO_STREAMING_TYPE_I_DESC_SIZE +
        USB_ENDPOINT_AUDIO_DESCRIPTOR_LENGTH +
        USB_AUDIO_STREAMING_ENDP_DESC_SIZE +
        /* Speaker streaming */
        USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_AUDIO_STREAMING_IFACE_DESC_SIZE +
        USB_AUDIO_STREAMING_TYPE_I_DESC_SIZE +
        USB_ENDPOINT_AUDIO_DESCRIPTOR_LENGTH +
        USB_AUDIO_STREAMING_ENDP_DESC_SIZE
    ),
    USB_SHORT_GET_HIGH(
        USB_DESCRIPTOR_LENGTH_CONFIGURE +
        USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_AUDIO_CONTROL_INTERFACE_HEADER_LENGTH +
        USB_AUDIO_INPUT_TERMINAL_ONLY_DESC_SIZE +
        USB_AUDIO_FEATURE_UNIT_ONLY_DESC_SIZE +
        USB_AUDIO_OUTPUT_TERMINAL_ONLY_DESC_SIZE +
        USB_DESCRIPTOR_LENGTH_AC_INTERRUPT_ENDPOINT +
        USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_AUDIO_STREAMING_IFACE_DESC_SIZE +
        USB_AUDIO_STREAMING_TYPE_I_DESC_SIZE +
        USB_ENDPOINT_AUDIO_DESCRIPTOR_LENGTH +
        USB_AUDIO_STREAMING_ENDP_DESC_SIZE +
        USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_DESCRIPTOR_LENGTH_INTERFACE +
        USB_AUDIO_STREAMING_IFACE_DESC_SIZE +
        USB_AUDIO_STREAMING_TYPE_I_DESC_SIZE +
        USB_ENDPOINT_AUDIO_DESCRIPTOR_LENGTH +
        USB_AUDIO_STREAMING_ENDP_DESC_SIZE
    ),
    USB_AUDIO_GENERATOR_INTERFACE_COUNT,  /* 3 interfaces: AC, Mic AS, Spk AS */
    USB_AUDIO_GENERATOR_CONFIGURE_INDEX,
    0x00U,
    (USB_DESCRIPTOR_CONFIGURE_ATTRIBUTE_D7_MASK)
#if defined(USB_DEVICE_CONFIG_SELF_POWER) && (USB_DEVICE_CONFIG_SELF_POWER > 0U)
        | (1U << USB_DESCRIPTOR_CONFIGURE_ATTRIBUTE_SELF_POWERED_SHIFT)
#endif
#if defined(USB_DEVICE_CONFIG_REMOTE_WAKEUP) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U)
        | (1U << USB_DESCRIPTOR_CONFIGURE_ATTRIBUTE_REMOTE_WAKEUP_SHIFT)
#endif
        ,
    USB_DEVICE_MAX_POWER,

    /* IAD: AC + 2 Streaming */
    0x08U,
    USB_DESCRIPTOR_TYPE_INTERFACE_ASSOCIATION,
    0x00U,
    0x03U,
    USB_AUDIO_CLASS,
    USB_SUBCLASS_AUDIOCONTROL,
    USB_AUDIO_PROTOCOL,
    0x00U,

    /* AC Interface, alt 0 */
    USB_DESCRIPTOR_LENGTH_INTERFACE,
    USB_DESCRIPTOR_TYPE_INTERFACE,
    USB_AUDIO_CONTROL_INTERFACE_INDEX,
    USB_AUDIO_GENERATOR_CONTROL_INTERFACE_ALTERNATE_0,
    0x00U,
    USB_AUDIO_CLASS,
    USB_SUBCLASS_AUDIOCONTROL,
    USB_AUDIO_PROTOCOL,
    0x00U,

    /* AC Header */
    USB_AUDIO_CONTROL_INTERFACE_HEADER_LENGTH,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_HEADER,
    0x00U, 0x01U,  /* UAC1.0 */
    0x27, 0x00U,  /* total CS length */
    0x02U,        /* two streaming interfaces */

    /* Mic Input Terminal */
    USB_AUDIO_INPUT_TERMINAL_ONLY_DESC_SIZE,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_INPUT_TERMINAL,
    USB_AUDIO_RECORDER_CONTROL_INPUT_TERMINAL_ID,
    0x01U, 0x02U,
    0x00U,
    0x01U,
    0x00U, 0x00U,
    0x00U,
    0x00U,  /* iTerminal */

    /* Mic Feature Unit */
    USB_AUDIO_FEATURE_UNIT_ONLY_DESC_SIZE,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_FEATURE_UNIT,
    USB_AUDIO_RECORDER_CONTROL_FEATURE_UNIT_ID,
    USB_AUDIO_RECORDER_CONTROL_INPUT_TERMINAL_ID,
    0x01U,
    0x03U, 0x00U,
    0x00U,
    0x00U,  /* iFeature */

    /* Mic Output Terminal */
    USB_AUDIO_OUTPUT_TERMINAL_ONLY_DESC_SIZE,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_OUTPUT_TERMINAL,
    USB_AUDIO_RECORDER_CONTROL_OUTPUT_TERMINAL_ID,
    0x01U, 0x01U,
    0x00U,
    USB_AUDIO_RECORDER_CONTROL_FEATURE_UNIT_ID,
    0x00U,  /* iTerminal */

    /* AC Interrupt Endpoint */
    USB_DESCRIPTOR_LENGTH_AC_INTERRUPT_ENDPOINT,
    USB_DESCRIPTOR_TYPE_ENDPOINT,
    USB_AUDIO_CONTROL_ENDPOINT | (USB_IN << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT),
    USB_ENDPOINT_INTERRUPT,
    USB_SHORT_GET_LOW(FS_INTERRUPT_IN_PACKET_SIZE),
    USB_SHORT_GET_HIGH(FS_INTERRUPT_IN_PACKET_SIZE),
    FS_INTERRUPT_IN_INTERVAL,
    0x00U,
    0x00U,

    /* Mic AS Interface, alt 0 */
    USB_DESCRIPTOR_LENGTH_INTERFACE,
    USB_DESCRIPTOR_TYPE_INTERFACE,
    USB_AUDIO_STREAM_INTERFACE_INDEX,
    USB_AUDIO_GENERATOR_STREAM_INTERFACE_ALTERNATE_0,
    0x00U,
    USB_AUDIO_CLASS,
    USB_SUBCLASS_AUDIOSTREAM,
    USB_AUDIO_PROTOCOL,
    0x00U,

    /* Mic AS Interface, alt 1 */
    USB_DESCRIPTOR_LENGTH_INTERFACE,
    USB_DESCRIPTOR_TYPE_INTERFACE,
    USB_AUDIO_STREAM_INTERFACE_INDEX,
    USB_AUDIO_GENERATOR_STREAM_INTERFACE_ALTERNATE_1,
    0x01U,
    USB_AUDIO_CLASS,
    USB_SUBCLASS_AUDIOSTREAM,
    USB_AUDIO_PROTOCOL,
    0x00U,

    /* Mic CS AS General */
    USB_AUDIO_STREAMING_IFACE_DESC_SIZE,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_STREAMING_AS_GENERAL,
    USB_AUDIO_RECORDER_CONTROL_OUTPUT_TERMINAL_ID,
    0x00U,

    /* Mic Format Type I */
    USB_AUDIO_STREAMING_TYPE_I_DESC_SIZE,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_STREAMING_FORMAT_TYPE,
    USB_AUDIO_FORMAT_TYPE_I,
    AUDIO_FORMAT_CHANNELS,
    0x01U,
    0x08U,
    0x01U,
    0x40, 0x1F, 0x00U,

    /* Mic ISO IN Endpoint */
    USB_ENDPOINT_AUDIO_DESCRIPTOR_LENGTH,
    USB_DESCRIPTOR_TYPE_ENDPOINT,
    USB_AUDIO_STREAM_ENDPOINT | (USB_IN << 7),
    USB_ENDPOINT_ISOCHRONOUS,
    USB_SHORT_GET_LOW(FS_ISO_IN_ENDP_PACKET_SIZE),
    USB_SHORT_GET_HIGH(FS_ISO_IN_ENDP_PACKET_SIZE),
    ISO_IN_ENDP_INTERVAL,
    0x00U, 0x00U,

    /* Mic CS ISO IN Endpoint */
    USB_AUDIO_STREAMING_ENDP_DESC_SIZE,
    USB_AUDIO_STREAM_ENDPOINT_DESCRIPTOR,
    USB_AUDIO_EP_GENERAL_DESCRIPTOR_SUBTYPE,
    0x00U, 0x00U, 0x00U, 0x00U, 0x00U,

    /* ===== SPEAKER CONTROL DESCRIPTORS ===== */

    /* Speaker Input Terminal (USB Streaming) */
    0x0CU,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_INPUT_TERMINAL,
    USB_AUDIO_SPEAKER_CONTROL_INPUT_TERMINAL_ID,
    0x01U, 0x01U,
    0x00U,
    USB_AUDIO_RECORDER_CONTROL_CLOCK_SOURCE_ENTITY_ID,
    0x02U,
    0x00U,
    0x00U,

    /* Speaker Feature Unit (Mute + Volume) */
    0x0EU,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_FEATURE_UNIT,
    USB_AUDIO_SPEAKER_CONTROL_FEATURE_UNIT_ID,
    USB_AUDIO_SPEAKER_CONTROL_INPUT_TERMINAL_ID,
    0x02U,
    0x03U, 0x00U,
    0x00U,
    0x00U,

    /* Speaker Output Terminal */
    0x09U,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_CONTROL_OUTPUT_TERMINAL,
    USB_AUDIO_SPEAKER_CONTROL_OUTPUT_TERMINAL_ID,
    0x03U, 0x01U,
    0x00U,
    USB_AUDIO_SPEAKER_CONTROL_FEATURE_UNIT_ID,
    0x00U,

    /* ===== SPEAKER AS Interface ===== */

    /* Speaker AS Interface, alt 0 */
    USB_DESCRIPTOR_LENGTH_INTERFACE,
    USB_DESCRIPTOR_TYPE_INTERFACE,
    USB_AUDIO_SPEAKER_STREAM_INTERFACE_INDEX,
    USB_AUDIO_SPEAKER_STREAM_INTERFACE_ALTERNATE_0,
    0x00U,
    USB_AUDIO_CLASS,
    USB_SUBCLASS_AUDIOSTREAM,
    USB_AUDIO_PROTOCOL,
    0x00U,

    /* Speaker AS Interface, alt 1 */
    USB_DESCRIPTOR_LENGTH_INTERFACE,
    USB_DESCRIPTOR_TYPE_INTERFACE,
    USB_AUDIO_SPEAKER_STREAM_INTERFACE_INDEX,
    USB_AUDIO_SPEAKER_STREAM_INTERFACE_ALTERNATE_1,
    0x01U,
    USB_AUDIO_CLASS,
    USB_SUBCLASS_AUDIOSTREAM,
    USB_AUDIO_PROTOCOL,
    0x00U,

    /* Speaker CS AS General */
    USB_AUDIO_STREAMING_IFACE_DESC_SIZE,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_STREAMING_AS_GENERAL,
    USB_AUDIO_SPEAKER_CONTROL_INPUT_TERMINAL_ID,
    0x00U,

    /* Speaker Format Type I */
    USB_AUDIO_STREAMING_TYPE_I_DESC_SIZE,
    USB_DESCRIPTOR_TYPE_AUDIO_CS_INTERFACE,
    USB_DESCRIPTOR_SUBTYPE_AUDIO_STREAMING_FORMAT_TYPE,
    USB_AUDIO_FORMAT_TYPE_I,
    0x02U,
    0x02U,
    0x10U,
    0x01U,
    /* 48 kHz */
    0x80, 0xBB, 0x00U,

    /* Speaker ISO OUT Endpoint */
    USB_ENDPOINT_AUDIO_DESCRIPTOR_LENGTH,
    USB_DESCRIPTOR_TYPE_ENDPOINT,
    USB_AUDIO_OUT_ENDPOINT | (USB_OUT << 7),
    USB_ENDPOINT_ISOCHRONOUS,
    USB_SHORT_GET_LOW(FS_ISO_OUT_ENDP_PACKET_SIZE),
    USB_SHORT_GET_HIGH(FS_ISO_OUT_ENDP_PACKET_SIZE),
    ISO_OUT_ENDP_INTERVAL,
    0x00U,
    0x00U,

    /* Speaker CS ISO OUT Endpoint */
    USB_AUDIO_STREAMING_ENDP_DESC_SIZE,
    USB_AUDIO_STREAM_ENDPOINT_DESCRIPTOR,
    USB_AUDIO_EP_GENERAL_DESCRIPTOR_SUBTYPE,
    0x00U, 0x00U, 0x00U, 0x00U, 0x00U,

#endif /* USB_DEVICE_CONFIG_AUDIO_CLASS_2_0 */
};

/* Define string descriptor */
USB_DMA_INIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE)
uint8_t g_UsbDeviceString0[] = {
    2U + 2U,
    USB_DESCRIPTOR_TYPE_STRING,
    0x09U,
    0x04U,
};

USB_DMA_INIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE)
uint8_t g_UsbDeviceString1[] = {
    2U + 2U * 18U, USB_DESCRIPTOR_TYPE_STRING,
    'N', 0x00U, 'X', 0x00U, 'P', 0x00U, ' ', 0x00U,
    'S', 0x00U, 'E', 0x00U, 'M', 0x00U, 'I', 0x00U,
    'C', 0x00U, 'O', 0x00U, 'N', 0x00U, 'D', 0x00U,
    'U', 0x00U, 'C', 0x00U, 'T', 0x00U, 'O', 0x00U,
    'R', 0x00U, 'S', 0x00U,
};

/* Updated product string: "USB Audio Device" */
USB_DMA_INIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE)
uint8_t g_UsbDeviceString2[] = {
    2U + 2U * 16U, USB_DESCRIPTOR_TYPE_STRING,
    'U', 0x00U, 'S', 0x00U, 'B', 0x00U, ' ', 0x00U,
    'A', 0x00U, 'u', 0x00U, 'd', 0x00U, 'i', 0x00U,
    'o', 0x00U, ' ', 0x00U, 'D', 0x00U, 'e', 0x00U,
    'v', 0x00U, 'i', 0x00U, 'c', 0x00U, 'e', 0x00U,
};

uint32_t g_UsbDeviceStringDescriptorLength[USB_DEVICE_STRING_COUNT] = {
    sizeof(g_UsbDeviceString0),
    sizeof(g_UsbDeviceString1),
    sizeof(g_UsbDeviceString2),
};

uint8_t *g_UsbDeviceStringDescriptorArray[USB_DEVICE_STRING_COUNT] = {
    g_UsbDeviceString0,
    g_UsbDeviceString1,
    g_UsbDeviceString2,
};

usb_language_t g_UsbDeviceLanguage[USB_DEVICE_LANGUAGE_COUNT] = {{
    g_UsbDeviceStringDescriptorArray,
    g_UsbDeviceStringDescriptorLength,
    (uint16_t)0x0409U,
}};

usb_language_list_t g_UsbDeviceLanguageList = {
    g_UsbDeviceString0,
    sizeof(g_UsbDeviceString0),
    g_UsbDeviceLanguage,
    USB_DEVICE_LANGUAGE_COUNT,
};

/*******************************************************************************
 * Code
 ******************************************************************************/

/*!
 * @brief Get the descriptor.
 */
usb_status_t USB_DeviceGetDescriptor(usb_device_handle handle,
                                     usb_setup_struct_t *setup,
                                     uint32_t *length,
                                     uint8_t **buffer)
{
    uint8_t descriptorType  = (uint8_t)((setup->wValue & 0xFF00U) >> 8U);
    uint8_t descriptorIndex = (uint8_t)((setup->wValue & 0x00FFU));
    usb_status_t ret        = kStatus_USB_Success;

    if (USB_REQUEST_STANDARD_GET_DESCRIPTOR != setup->bRequest)
    {
        return kStatus_USB_InvalidRequest;
    }

    switch (descriptorType)
    {
        case USB_DESCRIPTOR_TYPE_STRING:
            /* String descriptor logic */
            if (descriptorIndex == 0U)
            {
                *buffer = (uint8_t *)g_UsbDeviceLanguageList.languageString;
                *length = g_UsbDeviceLanguageList.stringLength;
            }
            else
            {
                uint8_t langIdIdx = 0U, langIndex = USB_DEVICE_STRING_COUNT;
                for (; langIdIdx < USB_DEVICE_LANGUAGE_COUNT; langIdIdx++)
                {
                    if (setup->wIndex ==
                        g_UsbDeviceLanguageList.languageList[langIdIdx].languageId)
                    {
                        if (descriptorIndex < USB_DEVICE_STRING_COUNT)
                        {
                            langIndex = descriptorIndex;
                        }
                        break;
                    }
                }
                if (langIndex == USB_DEVICE_STRING_COUNT)
                {
                    return kStatus_USB_InvalidRequest;
                }
                *buffer = (uint8_t *)g_UsbDeviceLanguageList.languageList[langIdIdx].string[langIndex];
                *length = g_UsbDeviceLanguageList.languageList[langIdIdx].length[{langIndex}];
            }
            break;

        case USB_DESCRIPTOR_TYPE_DEVICE:
            *buffer = g_UsbDeviceDescriptor;
            *length = USB_DESCRIPTOR_LENGTH_DEVICE;
            break;

        case USB_DESCRIPTOR_TYPE_CONFIGURE:
            *buffer = g_UsbDeviceConfigurationDescriptor;
            *length = USB_DESCRIPTOR_LENGTH_CONFIGURATION_ALL;
            break;

        default:
            ret = kStatus_USB_InvalidRequest;
            break;
    }
    return ret;
}

/*!
 * @brief Set the device configuration.
 */
usb_status_t USB_DeviceSetConfigure(usb_device_handle handle, uint8_t configure)
{
    if (configure == 0U)
    {
        return kStatus_USB_Error;
    }
    g_UsbDeviceCurrentConfigure = configure;
    return USB_DeviceCallback(handle, kUSB_DeviceEventSetConfiguration, &configure);
}

/*!
 * @brief Get the device configuration.
 */
usb_status_t USB_DeviceGetConfigure(usb_device_handle handle, uint8_t *configure)
{
    *configure = g_UsbDeviceCurrentConfigure;
    return kStatus_USB_Success;
}

/*!
 * @brief Set an interface alternate setting.
 */
usb_status_t USB_DeviceSetInterface(usb_device_handle handle,
                                    uint8_t interface,
                                    uint8_t alternateSetting)
{
    if (interface < USB_AUDIO_GENERATOR_INTERFACE_COUNT)
    {
        g_UsbDeviceInterface[interface] = alternateSetting;
        return USB_DeviceCallback(handle, kUSB_DeviceEventSetInterface, &interface);
    }
    return kStatus_USB_InvalidRequest;
}

/*!
 * @brief Get an interface alternate setting.
 */
usb_status_t USB_DeviceGetInterface(usb_device_handle handle,
                                    uint8_t interface,
                                    uint8_t *alternateSetting)
{
    if (interface < USB_AUDIO_GENERATOR_INTERFACE_COUNT)
    {
        *alternateSetting = g_UsbDeviceInterface[interface];
        return kStatus_USB_Success;
    }
    return kStatus_USB_InvalidRequest;
}

/*!
 * @brief Update descriptors for high/full speed.
 */
usb_status_t USB_DeviceSetSpeed(uint8_t speed)
{
    usb_descriptor_union_t *descHead =
        (usb_descriptor_union_t *)&g_UsbDeviceConfigurationDescriptor[0];
    usb_descriptor_union_t *descTail = (usb_descriptor_union_t *)
        (&g_UsbDeviceConfigurationDescriptor[USB_DESCRIPTOR_LENGTH_CONFIGURATION_ALL - 1U]);

    while (descHead < descTail)
    {
        if (descHead->common.bDescriptorType == USB_DESCRIPTOR_TYPE_ENDPOINT)
        {
            if (speed == USB_SPEED_HIGH)
            {
                if ((descHead->endpoint.bEndpointAddress & USB_ENDPOINT_NUMBER_MASK) ==
                    USB_AUDIO_STREAM_ENDPOINT)
                {
                    descHead->endpoint.bInterval = HS_ISO_IN_ENDP_INTERVAL;
                    USB_SHORT_TO_LITTLE_ENDIAN_ADDRESS(
                        HS_ISO_IN_ENDP_PACKET_SIZE,
                        descHead->endpoint.wMaxPacketSize);
                }
                else
                {
                    descHead->endpoint.bInterval = HS_INTERRUPT_IN_INTERVAL;
                    USB_SHORT_TO_LITTLE_ENDIAN_ADDRESS(
                        HS_INTERRUPT_IN_PACKET_SIZE,
                        descHead->endpoint.wMaxPacketSize);
                }
            }
            else
            {
                if ((descHead->endpoint.bEndpointAddress & USB_ENDPOINT_NUMBER_MASK) ==
                    USB_AUDIO_STREAM_ENDPOINT)
                {
                    descHead->endpoint.bInterval = FS_ISO_IN_ENDP_INTERVAL;
                    USB_SHORT_TO_LITTLE_ENDIAN_ADDRESS(
                        FS_ISO_IN_ENDP_PACKET_SIZE,
                        descHead->endpoint.wMaxPacketSize);
                }
                else
                {
                    descHead->endpoint.bInterval = FS_INTERRUPT_IN_INTERVAL;
                    USB_SHORT_TO_LITTLE_ENDIAN_ADDRESS(
                        FS_INTERRUPT_IN_PACKET_SIZE,
                        descHead->endpoint.wMaxPacketSize);
                }
            }
        }
        descHead = (usb_descriptor_union_t *)((uint8_t *)descHead + descHead->common.bLength);
    }

    return kStatus_USB_Success;
}
